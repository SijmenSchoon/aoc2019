fn part1() -> String {
    let input_str = "59731816011884092945351508129673371014862103878684944826017645844741545300230138932831133873839512146713127268759974246245502075014905070039532876129205215417851534077861438833829150700128859789264910166202535524896960863759734991379392200570075995540154404564759515739872348617947354357737896622983395480822393561314056840468397927687908512181180566958267371679145705350771757054349846320639601111983284494477902984330803048219450650034662420834263425046219982608792077128250835515865313986075722145069152768623913680721193045475863879571787112159970381407518157406924221437152946039000886837781446203456224983154446561285113664381711600293030463013";
    let mut input: Vec<i32> = input_str
        .chars()
        .map(|i| i.to_digit(10).unwrap() as i32)
        .collect();

    for _ in 0..100 {
        input = (1..=input.len())
            .map(|number| {
                input
                    .iter()
                    .zip(
                        [0, 1, 0, -1]
                            .iter()
                            .map(|i| vec![i; number])
                            .flatten()
                            .cycle()
                            .skip(1),
                    )
                    .map(|(c, n)| c * n)
                    .sum::<i32>()
                    .abs()
                    % 10
            })
            .collect();
    }

    input[..8]
        .iter()
        .map(|i| i.to_string())
        .collect::<Vec<_>>()
        .join("")
}

fn part2() -> String {
    let input_str = "59731816011884092945351508129673371014862103878684944826017645844741545300230138932831133873839512146713127268759974246245502075014905070039532876129205215417851534077861438833829150700128859789264910166202535524896960863759734991379392200570075995540154404564759515739872348617947354357737896622983395480822393561314056840468397927687908512181180566958267371679145705350771757054349846320639601111983284494477902984330803048219450650034662420834263425046219982608792077128250835515865313986075722145069152768623913680721193045475863879571787112159970381407518157406924221437152946039000886837781446203456224983154446561285113664381711600293030463013";
    let offset: usize = input_str[..7].parse::<usize>().unwrap();
    let mut input: Vec<i32> = input_str
        .chars()
        .map(|i| i.to_digit(10).unwrap() as i32)
        .cycle()
        .take(input_str.len() * 10000)
        .skip(offset)
        .collect();

    for _ in 0..100 {
        let mut new = vec![0; input.len()];
        new[0] = input.iter().map(|x| x.abs()).sum();
        for x in 1..input.len() {
            new[x] = new[x - 1] - input[x - 1];
        }

        input = new.iter().map(|x| x % 10).collect();
    }

    input[..8]
        .iter()
        .map(|i| i.to_string())
        .collect::<Vec<_>>()
        .join("")
}

fn main() {
    dbg!(part1());
    dbg!(part2());
}
